# For this project, I downloaded Spotify data from Kaggle.
# Then I created a table to insert Spotify data into.
# Finally, I performed analytics on the data using SQL. 

#Creating the table: 
CREATE TABLE BIT_DB.Spotifydata (
id integer PRIMARY KEY,
artist_name varchar NOT NULL,
track_name varchar NOT NULL,
track_id varchar NOT NULL,
popularity integer NOT NULL,
danceability decimal(4,3) NOT NULL,
energy decimal(4,3) NOT NULL,
key integer NOT NULL,
loudness decimal(5,3) NOT NULL,
mode integer NOT NULL,
speechiness decimal(5,4) NOT NULL,
acousticness decimal(6,5) NOT NULL,
instrumentalness text NOT NULL,
liveness decimal(5,4) NOT NULL,
valence decimal(4,3) NOT NULL,
tempo decimal(6,3) NOT NULL,
duration_ms integer NOT NULL,
time_signature integer NOT NULL 
)

#Then I inserted the Spotify Data .csv into the table.

#Next, I explored the data using the following SQL. 

#Analyze artists and their average danceability scores, sorted by highest danceability.

SELECT artist_name, AVG(danceability)
FROM BIT_DB.Spotifydata
GROUP BY artist_name 
ORDER BY AVG(danceability) desc;

#Analyze the top 10 most popular tracks with their average danceability, sorted by popularity.

SELECT track_name, popularity, AVG(danceability)
FROM BIT_DB.Spotifydata
GROUP BY track_name
ORDER BY popularity desc
LIMIT 10;

#Calculate the average danceability of the top 10 most popular tracks.

SELECT AVG(danceability) AS avg_danceability
FROM (
    SELECT track_name, danceability
    FROM Spotifydata
    ORDER BY popularity DESC
    LIMIT 10
) AS Top10Songs;

#Lists artists with the number of their tracks, average popularity, and average danceability, sorted by track count.
SELECT artist_name, 
COUNT(artist_name) AS frequency, 
ROUND(AVG(popularity)) AS average_popularity,
ROUND(AVG(danceability),2) AS average_danceability
FROM BIT_DB.Spotifydata
GROUP BY artist_name
ORDER BY frequency desc
